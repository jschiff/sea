package com.getperka.sea.jms;

/*
 * #%L
 * Simple Event Architecture - JMS Support
 * %%
 * Copyright (C) 2012 Perka Inc.
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;

import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;

import com.getperka.sea.jms.SubscriptionOptionsBuilder.Handler;

/**
 * Verifies the behavior of {@link SubscriptionOptionsBuilder}.
 */
@SubscriptionOptions(destinationName = "foo")
public class SubscriptionOptionsTest {

  @Test
  public void test() throws Exception {
    Map<String, Object> expected = new HashMap<String, Object>();
    SubscriptionOptionsBuilder options = new SubscriptionOptionsBuilder();

    /*
     * Construct a new SubscriptionOptions. Each annotation value will be generated by using the
     * name of the property for string properties, or a non-default enum value.
     */
    for (Method m : SubscriptionOptions.class.getDeclaredMethods()) {
      Class<?> returnType = m.getReturnType();

      Method toInvoke = options.getClass().getMethod(m.getName(), returnType);

      Object arg;
      if (String.class.equals(returnType)) {
        arg = m.getName();
      } else if (boolean.class.equals(returnType)) {
        arg = !((Boolean) m.getDefaultValue()).booleanValue();
      } else if (returnType.isEnum()) {
        List<Object> choices = new ArrayList<Object>(Arrays.asList(returnType.getEnumConstants()));
        choices.remove(m.getDefaultValue());
        arg = choices.get(0);
      } else {
        throw new UnsupportedOperationException(returnType.getName());
      }

      expected.put(m.getName(), arg);
      toInvoke.invoke(options, arg);
    }

    // Quick check of internal state
    assertEquals(expected, options.peek());

    // Verify map contents against backing InvocationHandler
    SubscriptionOptions built = options.build();
    Handler handler = (Handler) Proxy.getInvocationHandler(built);
    assertEquals(expected, handler.peek());

    // Quick equality checks
    assertEquals(built, built);
    assertEquals(built.hashCode(), built.hashCode());
    assertEquals(built.toString(), built.toString());
    assertFalse(built.equals(null));

    // Verify copying works
    SubscriptionOptions copy = new SubscriptionOptionsBuilder()
        .copyFrom(built)
        .build();
    assertEquals(built, copy);
    assertEquals(built.hashCode(), copy.hashCode());
    assertEquals(built.toString(), copy.toString());

    // Verify mutations break equality
    SubscriptionOptions changed = new SubscriptionOptionsBuilder()
        .copyFrom(built)
        .destinationName("foo")
        .build();
    assertFalse(built.equals(changed));
  }

  /**
   * Check comparison against an annotation instance from source code.
   */
  @Test
  public void testCompareToReal() {
    SubscriptionOptions real = getClass().getAnnotation(SubscriptionOptions.class);
    SubscriptionOptions copy = new SubscriptionOptionsBuilder().copyFrom(real).build();
    assertEquals(copy, real);
    assertEquals(real, copy);
  }

  /**
   * Test access to default property values.
   */
  @Test
  public void testDefaults() throws Exception {
    SubscriptionOptions options = new SubscriptionOptionsBuilder().build();
    for (Method m : SubscriptionOptions.class.getDeclaredMethods()) {
      assertEquals(m.getName(), m.getDefaultValue(), m.invoke(options));
    }
  }

  /**
   * Verify behavior when {@link SubscriptionOptionsBuilder#build()} is called multiple times.
   */
  @Test
  public void testMultipleBuild() {
    SubscriptionOptionsBuilder builder = new SubscriptionOptionsBuilder();
    SubscriptionOptions a = builder.destinationName("foo").build();
    SubscriptionOptions b = builder.destinationName("bar").build();

    assertEquals("foo", a.destinationName());
    assertEquals("bar", b.destinationName());
  }
}
